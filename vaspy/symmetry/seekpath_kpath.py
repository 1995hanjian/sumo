# coding: utf-8
# Copyright (c) Scanlon Materials Theory Group
# Distributed under the terms of the MIT License.

"""
Module containing class for generating k-points along paths from SeeK-path.
"""

from vaspy.symmetry import Kpath


class SeekpathKpath(Kpath):
    r"""Class to generate k-points along paths from SeeK-path.

    More detail on the paths generated by SeeK-path can be found in
    reference [1]_.

    .. [1] Y. Hinuma, G. Pizzi, Y. Kumagai, F. Oba, I. Tanaka, Band structure
           diagram paths based on crystallography, Comp. Mat. Sci. 128, 140
           (2017). doi: 10.1016/j.commatsci.2016.10.015

    These paths should be used with primitive structures that comply with the
    definition from the paper. This structure can be accessed using the
    ``prim`` attribute and compliance between the provided structure and
    standardised structure checked using the ``correct_structure()`` method.

    Args:
        structure (:obj:`~pymatgen.core.structure.Structure`): The structure.
        symprec (:obj:`float`, optional): The tolerance for determining the
            crystal symmetry.

    Attributes:
        kpoints (dict): The high-symmetry k-point labels and their fractional
            coordinates. Formatted as ``{label: coords}``. For example::

                {'\Gamma': [0., 0., 0.], 'X': [0.5, 0. 0.]}

        path (list): The high-symmetry k-point path. Each subpath is provided
            as a list. For example, the following covers the path ``\Gamma ->
            X -> C | \Gamma -> Y``::

                [['\Gamma', 'X', 'C'], ['\Gamma', 'Y']].

        prim (:obj:`~pymatgen.core.structure.Structure`): The standardised
            primitive cell structure for the generated k-point path.
        conv (:obj:`~pymatgen.core.structure.Structure`): The standardised
            conventional cell structure.
        lattice_type (str): The Bravais lattice system. Hexagonal cells are
            separated into rhombohedral and hexagonal lattices.
        spg_symbol (str): The international space group symbol.
        spg_number (int): The international space group number.
        path_string (str): The high-symmetry k-point path formatted with arrows
            and showing disconnections between subpaths. For example::

                "X -> Gamma | Y -> Z"
    """

    def __init__(self, structure, symprec=1e-3):
        Kpath.__init__(self, structure, symprec=symprec)

        # need to convert from seekpath format to something useable
        path = [[self._seek_data['path'][0][0]]]
        for (k1, k2) in self._seek_data['path']:
            if path[-1] and path[-1][-1] == k1:
                path[-1].append(k2)
            else:
                path.append([k1, k2])

        # change gamma label to \Gamma
        kpoints = self._seek_data['point_coords']
        kpoints[r'\Gamma'] = kpoints.pop('GAMMA')
        path = [[label.replace('GAMMA', r'\Gamma') for label in subpath]
                for subpath in path]

        # remove unused k-points
        # TODO: this but better
        pts = []
        for subpath in path:
            pts += subpath
        pts = list(set(pts))
        pts_coords = [kpoints[p] for p in pts]
        kpoints = dict(zip(pts, pts_coords))
        self._kpath = {'kpoints': kpoints, 'path': path}
